// configs/gemini.js

import { GoogleGenerativeAI } from '@google/generative-ai';

const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function main(prompt) {
  try {
    if (!prompt || typeof prompt !== 'string' || prompt.trim() === '') {
      throw new Error('Invalid prompt provided to AI');
    }
    console.log('Initiating AI request with prompt:', prompt);
    const model = ai.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1000,
        topP: 0.9,
      },
    });
    console.log('Full API response:', JSON.stringify(result, null, 2));

    // FIX START: Adjust the path to 'text' to include '.response'
    const text = result?.response?.candidates?.[0]?.content?.parts?.[0]?.text || '';
    // FIX END

    const trimmedText = text.trim();
    console.log('AI generated text (trimmed):', trimmedText);

    if (!trimmedText) {
      // This error will now correctly trigger if the AI genuinely returns no text
      throw new Error('No valid content generated by AI. Response structure: ' + JSON.stringify(result));
    }
    return trimmedText;
  } catch (error) {
    console.error('Error in main function:', {
      message: error.message,
      details: error.response?.data || error.cause || 'No response data',
      stack: error.stack,
    });
    throw error;
  }
}

export default main;